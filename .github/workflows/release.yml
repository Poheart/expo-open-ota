name: Release Workflow

on:
  push:
    tags:
      - "v*"

permissions:
  id-token: write
  contents: write
  packages: write

jobs:
  checkout:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

  docker:
    runs-on: ubuntu-latest
    needs: checkout
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and tag Docker image
        run: |
          IMAGE_TAG="${GITHUB_REF#refs/tags/}"
          REPO="ghcr.io/${{ github.repository_owner }}/expo-open-ota"

          echo "üî® Building Docker image with tag: $IMAGE_TAG"
          docker build -t "$REPO:$IMAGE_TAG" .
          docker push "$REPO:$IMAGE_TAG"

      - name: Check latest version and update latest tag
        run: |
          REPO="ghcr.io/${{ github.repository_owner }}/expo-open-ota"
          IMAGE_TAG="${GITHUB_REF#refs/tags/}"
          echo "üì° Fetching the latest version tag from GHCR..."
          LATEST_TAG=$(gh api "https://api.github.com/users/${{ github.repository_owner }}/packages/container/expo-open-ota/versions" \
            --jq '[.[].metadata.container.tags[]] | map(select(test("^v[0-9]+\\.[0-9]+\\.[0-9]+$"))) | sort_by(.) | last' | tr -d '"')

          echo "üîç Latest found version: $LATEST_TAG"
          echo "üè∑Ô∏è Current version: $IMAGE_TAG"

          if [ "$LATEST_TAG" = "$IMAGE_TAG" ]; then
            echo "‚úÖ $IMAGE_TAG is the latest version. Updating latest tag..."
            docker tag "$REPO:$IMAGE_TAG" "$REPO:latest"
            docker push "$REPO:latest"
          else
            echo "‚ÑπÔ∏è $IMAGE_TAG is not the latest version. Skipping latest tag update."
          fi

  helm:
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Update Helm values.yaml
        run: |
          IMAGE_TAG="${GITHUB_REF#refs/tags/}"
          sed -i "s/tag: .*/tag: ${IMAGE_TAG}/" helm/values.yaml

      - name: Package Helm chart
        run: |
          IMAGE_TAG="${GITHUB_REF#refs/tags/}"
          helm package ./helm -d ./charts
          mv ./charts/expo-open-ota-*.tgz ./charts/expo-open-ota-helm-charts-${IMAGE_TAG}.tgz

  npm:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          registry-url: "https://registry.npmjs.org"

      - name: Publish NPM package
        run: |
          cd eoas
          npm ci
          npm run build
          npm version ${{ github.ref_name }} --no-git-tag-version
          npm publish --access public --provenance
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  github-release:
    runs-on: ubuntu-latest
    needs: [helm, npm]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./charts/*.tgz
          body: |
            ## Changes
            - Docker image: `ghcr.io/${{ github.repository_owner }}/expo-open-ota:${{ github.ref_name }}`
            - Helm chart version updated
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
