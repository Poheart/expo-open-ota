name: Release Workflow

on:
  push:
    tags:
      - "v*"

permissions:
  id-token: write
  contents: write
  packages: write

jobs:
  checkout:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

  docker:
    runs-on: ubuntu-latest
    needs: checkout
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" \
            | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Build Go binary with version
        run: |
          IMAGE_TAG="${GITHUB_REF#refs/tags/}"
          go build -ldflags="-X 'github.com/axelmarciano/expo-open-ota/internal.Version=${IMAGE_TAG}'" \
                   -o expo-open-ota .

      - name: Build and tag Docker image
        run: |
          IMAGE_TAG="${GITHUB_REF#refs/tags/}"
          REPO="ghcr.io/${{ github.repository_owner }}/expo-open-ota"

          echo "üî® Building Docker image with tag: $IMAGE_TAG"
          docker build -t "$REPO:$IMAGE_TAG" .
          docker push "$REPO:$IMAGE_TAG"

      - name: Check highest semver and update :latest
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          IMAGE_TAG="${GITHUB_REF#refs/tags/}"
          REPO="ghcr.io/${{ github.repository_owner }}/expo-open-ota"

          echo "üì° Fetching all semver tags from GHCR..."
          ALL_TAGS=$(gh api "https://api.github.com/users/${{ github.repository_owner }}/packages/container/expo-open-ota/versions" \
            --jq '[.[].metadata.container.tags[]] |
                   map(select(test("^v[0-9]+\\.[0-9]+\\.[0-9]+$"))) |
                   sort_by(.)')
          LATEST_TAG=$(echo "$ALL_TAGS" | jq -r 'last')
          
          echo "üîç Latest GHCR semver: $LATEST_TAG"
          echo "üè∑Ô∏è Current tag:       v$IMAGE_TAG"
          
          if [ "v$IMAGE_TAG" = "$LATEST_TAG" ]; then
            echo "‚úÖ This is the highest semver ‚Üí tagging as :latest"
            docker tag "$REPO:$IMAGE_TAG" "$REPO:latest"
            docker push "$REPO:latest"
          else
            echo "‚ÑπÔ∏è  Not the highest semver ‚Üí skipping :latest"
          fi

  helm:
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Update Helm values.yaml
        run: |
          IMAGE_TAG="${GITHUB_REF#refs/tags/}"
          sed -i "s/tag: .*/tag: ${IMAGE_TAG}/" helm/values.yaml

      - name: Package Helm chart
        run: |
          IMAGE_TAG="${GITHUB_REF#refs/tags/}"
          helm package ./helm --destination ./charts
          mv ./charts/expo-open-ota-*.tgz "./charts/expo-open-ota-helm-charts-${IMAGE_TAG}.tgz"

  npm:
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          registry-url: "https://registry.npmjs.org"

      - name: Publish NPM package
        working-directory: apps/eoas
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          TAG="${GITHUB_REF#refs/tags/}"
          VERSION="${TAG#v}"
          npm ci
          npm run build
          npm version "$VERSION" --no-git-tag-version
          npm publish --access public --provenance

  github-release:
    runs-on: ubuntu-latest
    needs: [helm, npm]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Compute release notes
        id: notes
        run: |
          TAG="${GITHUB_REF#refs/tags/}"
          VERSION="${TAG#v}"
          {
            echo "body<<EOF"
            echo "## Changes"
            echo "- Docker image: ghcr.io/${{ github.repository_owner }}/expo-open-ota:${TAG}"
            echo "- Helm chart version updated for tag ${TAG}"
            echo "- npm package eoas@${VERSION}"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          files: ./charts/*.tgz
          body: ${{ steps.notes.outputs.body }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
